import numpy as np


def get_ac_luminance_table():

    # Table K5
    # Table for luminance AC coefficients
    k5 = dict()
    k5[(0, 0)] = "1010"
    k5[(0, 1)] = "00"
    k5[(0, 2)] = "01"
    k5[(0, 3)] = "100"
    k5[(0, 4)] = "1011"
    k5[(0, 5)] = "11010"
    k5[(0, 6)] = "1111000"
    k5[(0, 7)] = "11111000"
    k5[(0, 8)] = "1111110110"
    k5[(0, 9)] = "1111111110000010"
    k5[(0, 10)] = "1111111110000011"

    k5[(1, 1)] = "1100"
    k5[(1, 2)] = "11011"
    k5[(1, 3)] = "1111001"
    k5[(1, 4)] = "111110110"
    k5[(1, 5)] = "11111110110"
    k5[(1, 6)] = "1111111110000100"
    k5[(1, 7)] = "1111111110000101"
    k5[(1, 8)] = "1111111110000110"
    k5[(1, 9)] = "1111111110000111"
    k5[(1, 10)] = "1111111110001000"

    k5[(2, 1)] = "11100"
    k5[(2, 2)] = "11111001"
    k5[(2, 3)] = "1111110111"
    k5[(2, 4)] = "111111110100"
    k5[(2, 5)] = "1111111110001001"
    k5[(2, 6)] = "1111111110001010"
    k5[(2, 7)] = "1111111110001011"
    k5[(2, 8)] = "1111111110001100"
    k5[(2, 9)] = "1111111110001101"
    k5[(2, 10)] = "1111111110001110"

    k5[(3, 1)] = "111010"
    k5[(3, 2)] = "111110111"
    k5[(3, 3)] = "111111110101"
    k5[(3, 4)] = "1111111110001111"
    k5[(3, 5)] = "1111111110010000"
    k5[(3, 6)] = "1111111110010001"
    k5[(3, 7)] = "1111111110010010"
    k5[(3, 8)] = "1111111110010011"
    k5[(3, 9)] = "1111111110010100"
    k5[(3, 10)] = "1111111110010101"

    k5[(4, 1)] = "111011"
    k5[(4, 2)] = "1111111000"
    k5[(4, 3)] = "1111111110010110"
    k5[(4, 4)] = "1111111110010111"
    k5[(4, 5)] = "1111111110011000"
    k5[(4, 6)] = "1111111110011001"
    k5[(4, 7)] = "1111111110011010"
    k5[(4, 8)] = "1111111110011011"
    k5[(4, 9)] = "1111111110011100"
    k5[(4, 10)] = "1111111110011101"

    k5[(5, 1)] = "1111010"
    k5[(5, 2)] = "11111110111"
    k5[(5, 3)] = "1111111110011110"
    k5[(5, 4)] = "1111111110011111"
    k5[(5, 5)] = "1111111110100000"
    k5[(5, 6)] = "1111111110100001"
    k5[(5, 7)] = "1111111110100010"
    k5[(5, 8)] = "1111111110100011"
    k5[(5, 9)] = "1111111110100100"
    k5[(5, 10)] = "1111111110100101"

    k5[(6, 1)] = "1111011"
    k5[(6, 2)] = "111111110110"
    k5[(6, 3)] = "1111111110100110"
    k5[(6, 4)] = "1111111110100111"
    k5[(6, 5)] = "1111111110101000"
    k5[(6, 6)] = "1111111110101001"
    k5[(6, 7)] = "1111111110101010"
    k5[(6, 8)] = "1111111110101011"
    k5[(6, 9)] = "1111111110101100"
    k5[(6, 10)] = "1111111110101101"

    k5[(7, 1)] = "11111010"
    k5[(7, 2)] = "111111110111"
    k5[(7, 3)] = "1111111110101110"
    k5[(7, 4)] = "1111111110101111"
    k5[(7, 5)] = "1111111110110000"
    k5[(7, 6)] = "1111111110110001"
    k5[(7, 7)] = "1111111110110010"
    k5[(7, 8)] = "1111111110110011"
    k5[(7, 9)] = "1111111110110100"
    k5[(7, 10)] = "1111111110110101"

    k5[(8, 1)] = "111111000"
    k5[(8, 2)] = "111111111000000"
    k5[(8, 3)] = "1111111110110110"
    k5[(8, 4)] = "1111111110110111"
    k5[(8, 5)] = "1111111110111000"
    k5[(8, 6)] = "1111111110111001"
    k5[(8, 7)] = "1111111110111010"
    k5[(8, 8)] = "1111111110111011"
    k5[(8, 9)] = "1111111110111100"
    k5[(8, 10)] = "1111111110111101"

    k5[(9, 1)] = "111111001"
    k5[(9, 2)] = "1111111110111110"
    k5[(9, 3)] = "1111111110111111"
    k5[(9, 4)] = "1111111111000000"
    k5[(9, 5)] = "1111111111000001"
    k5[(9, 6)] = "1111111111000010"
    k5[(9, 7)] = "1111111111000011"
    k5[(9, 8)] = "1111111111000100"
    k5[(9, 9)] = "1111111111000101"
    k5[(9, 10)] = "1111111111000110"

    k5[(10, 1)] = "111111010"
    k5[(10, 2)] = "1111111111000111"
    k5[(10, 3)] = "1111111111001000"
    k5[(10, 4)] = "1111111111001001"
    k5[(10, 5)] = "1111111111001010"
    k5[(10, 6)] = "1111111111001011"
    k5[(10, 7)] = "1111111111001100"
    k5[(10, 8)] = "1111111111001101"
    k5[(10, 9)] = "1111111111001110"
    k5[(10, 10)] = "1111111111001111"

    k5[(11, 1)] = "1111111001"
    k5[(11, 2)] = "1111111111010000"
    k5[(11, 3)] = "1111111111010001"
    k5[(11, 4)] = "1111111111010010"
    k5[(11, 5)] = "1111111111010011"
    k5[(11, 6)] = "1111111111010100"
    k5[(11, 7)] = "1111111111010101"
    k5[(11, 8)] = "1111111111010110"
    k5[(11, 9)] = "1111111111010111"
    k5[(11, 10)] = "1111111111011000"

    k5[(12, 1)] = "1111111010"
    k5[(12, 2)] = "1111111111011001"
    k5[(12, 3)] = "1111111111011010"
    k5[(12, 4)] = "1111111111011011"
    k5[(12, 5)] = "1111111111011100"
    k5[(12, 6)] = "1111111111011101"
    k5[(12, 7)] = "1111111111011110"
    k5[(12, 8)] = "1111111111011111"
    k5[(12, 9)] = "1111111111100000"
    k5[(12, 10)] = "1111111111100001"

    k5[(13, 1)] = "11111111000"
    k5[(13, 2)] = "1111111111100010"
    k5[(13, 3)] = "1111111111100011"
    k5[(13, 4)] = "1111111111100100"
    k5[(13, 5)] = "1111111111100101"
    k5[(13, 6)] = "1111111111100110"
    k5[(13, 7)] = "1111111111100111"
    k5[(13, 8)] = "1111111111101000"
    k5[(13, 9)] = "1111111111101001"
    k5[(13, 10)] = "1111111111101010"

    k5[(14, 1)] = "1111111111101011"
    k5[(14, 2)] = "1111111111101100"
    k5[(14, 3)] = "1111111111101101"
    k5[(14, 4)] = "1111111111101110"
    k5[(14, 5)] = "1111111111101111"
    k5[(14, 6)] = "1111111111110000"
    k5[(14, 7)] = "1111111111110001"
    k5[(14, 8)] = "1111111111110010"
    k5[(14, 9)] = "1111111111110011"
    k5[(14, 10)] = "1111111111110100"

    k5[(15, 0)] = "11111111001"
    k5[(15, 1)] = "1111111111110101"
    k5[(15, 2)] = "1111111111110110"
    k5[(15, 3)] = "1111111111110111"
    k5[(15, 4)] = "1111111111111000"
    k5[(15, 5)] = "1111111111111001"
    k5[(15, 6)] = "1111111111111010"
    k5[(15, 7)] = "1111111111111011"
    k5[(15, 8)] = "1111111111111100"
    k5[(15, 9)] = "1111111111111101"
    k5[(15, 10)] = "1111111111111110"

    return k5


def get_size(amplitude: int, positive: bool) -> (int, int):
    return amplitude, len("{0:b}".format(np.abs(amplitude)))


def write_ac_as_integer(sub_matrix: np.array) -> dict:
    ac_table = dict()
    count_zeros = 0
    for i in range(1, len(sub_matrix) - 1):
        
        if sub_matrix[i] == 0:
            count_zeros += 1
            
        elif sub_matrix[i] > 0:
            size, amplitude = get_size(sub_matrix[i], True)
            ac_table[i] = [(count_zeros, amplitude), size]
            count_zeros = 0
            
        elif sub_matrix[i] < 0:
            size, amplitude = get_size(sub_matrix[i], False)
            ac_table[i] = [(count_zeros, amplitude), size]
            count_zeros = 0
            
        ac_table[len(sub_matrix) - 1] = [(0, 0), 0]
        
    return ac_table


def encode(sub_matrix: np.array) -> str:
    k5 = get_ac_luminance_table()
    ac_binary = ""
    count_zeros = 0
    
    for i in range(1, len(sub_matrix) - 1):
        
        if sub_matrix[i] == 0:
            count_zeros += 1
            
        elif sub_matrix[i] > 0:
            size, amplitude = get_size(sub_matrix[i], True)
            value = k5[(count_zeros, amplitude)]
            amplitude = "0" + "{0:b}".format(np.abs(size))
            ac_binary += value + amplitude
            count_zeros = 0
            
        elif sub_matrix[i] < 0:
            size, amplitude = get_size(sub_matrix[i], True)
            value = k5[(count_zeros, amplitude)]
            amplitude = "1" + "{0:b}".format(np.abs(size))
            ac_binary += value + amplitude
            count_zeros = 0
  
    return ac_binary


def decode(bit_stream: str, dc_value: int) -> ():
    
    k5 = get_ac_luminance_table()
    dimensions = [len(v) for v in k5.values()]
    dict_values = list(k5.values())
    dict_keys = list(k5.keys())
    min_size = min(map(len, dict_values))
    len_dict_values = len(dict_values)
    decoded = np.zeros(64)
    decoded[0] = dc_value
    i = 0
    j = 1
    decoded_index = 1
    while len(bit_stream) > 0:
        i += 1
        if i in dimensions:
            for v in range(len_dict_values):
                if len(bit_stream[:i]) == len(dict_values[v]):
                    if bit_stream[:i] == dict_values[v]:
                        zero_run_length = dict_keys[v][0]
                        if zero_run_length != 0:
                            
                            for z in range(zero_run_length):
                                decoded[decoded_index] = 0
                                decoded_index += 1
                                
                        nr_bits = dict_keys[v][1] + 1  # mais bit de sinal
                        binary_value = bit_stream[i: i + nr_bits]
                        
                        if binary_value[0] != "0":
                            int_value = binary_to_int(binary_value, False)
                        else:
                            int_value = binary_to_int(binary_value, True)
                            
                        decoded[decoded_index] = int_value
                        bit_stream = bit_stream[i + nr_bits:]
                        j += 1
                        i = min_size - 1
                        decoded_index += 1
                        break
                        
    return decoded.astype(int)


def binary_to_int(binary: str, positive: bool = True) -> int:
    
    if binary != "0":
        binary = binary[1:]
        int_value = int(binary, 2)
        if not positive:
            return -int_value
        return int_value
    else:
        return 0
